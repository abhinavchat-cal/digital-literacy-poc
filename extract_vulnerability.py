# importing all required librarys
import json
import os
import smtplib
from email import encoders
from email.mime.base import MIMEBase
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText

from prettytable import PrettyTable

# retrive Environment variables form github secrets
server_address = os.environ.get("server_address")
server_port = os.environ.get("server_port")
username = os.environ.get("username")
password = os.environ.get("password")
sender_email = os.environ.get("sender")
repo = os.environ.get("repository")
tag = os.environ.get("tag")


with open("trivy-results-json-format.json", "r") as file:
    trivy_data = json.load(file)
    new_result = trivy_data["Results"]
    refined_data = trivy_data["Results"]
    results = refined_data[0]
    Vulnerabilities = results["Vulnerabilities"]
    t = PrettyTable(["VulnerabilityID", "Severity", "Description"])
    for x in Vulnerabilities:
        if x["Severity"] == "HIGH" or x["Severity"] == "CRITICAL":
            t.add_row([x["VulnerabilityID"], x["Severity"], x["Description"]])
    html_table = t.get_html_string()
with open("receivers.txt", "r") as file:
    receivers = [line.strip() for line in file]


# Create the email message
message = MIMEMultipart()
message["From"] = sender_email
message["To"] = ", ".join(receivers)
message["Subject"] = "Results of vulnerability scan"

html_content = f"""   
              <!DOCTYPE html>
              <html>
              <head>
                <title>GitHub Actions Email</title>
              </head>
              <title> Reostory {repo}</title>
              <title> Tag {tag}</title>
              
              <body>
                <h2>GitHub Actions Notification</h2>
                <h3>Vulnerability Scan Results:</h3>
                <p>Here are the results of the vulnerability scan which are Critical and High on severity:</p>
                 {html_table}
                <p>For the complete report on the vulnerability scan, please refer to the attachment.</p>
                <p>And take appropriate action to address these vulnerabilities. Also make sure to use this latest image tag for your deployments to ensure you are using the most up-to-date and secure version.<br></p>
              </body>
              </html>
"""

body = "This is the email body."
html_part = MIMEText(html_content, "html")
# message.attach(MIMEText(body, 'plain'))
message.attach(html_part)

part = MIMEBase("application", "octet-stream")
part.set_payload(open("trivy-results-json-format.json", "rb").read())
encoders.encode_base64(part)
part.add_header(
    "Content-Disposition", 'attachment; filename="trivy-results-json-format.json"'
)

message.attach(part)
# Connect to the SMTP server and send the email
try:
    with smtplib.SMTP(server_address, server_port) as server:
        server.starttls()
        server.login(username, password)
        server.send_message(message)
    print("Email sent successfully!")
except Exception as e:
    print(f"Failed to send email. Error: {e}")
